name: Commit
  
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      checks: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
     
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build
        env:
          TEST_COSMOS_CONNECTION_STRING: ${{ secrets.TEST_COSMOS_CONNECTION_STRING }}

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: .NET Tests
          path: .test-results/*.trx
          reporter: dotnet-trx
          
  publish:
    name: Publish to GitHub Container Registry
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
          
      - name: Generate variables
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          
      - name: Publish for docker image
        run: |
          dotnet publish --configuration Release -p:VersionPrefix="0.0.0" --version-suffix 'commit+${{ steps.vars.outputs.sha_short }}' --output bin/docker-publish
        working-directory: sample/CustomerApi

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/logotter/customer-api
          labels: |
            org.opencontainers.image.title=Customer API
            org.opencontainers.image.description=Sample API showing how to use LogOtter

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          context: sample/CustomerApi
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
            
      - name: Trigger app service container update
        run: curl ${{ secrets.CUSTOMER_API_DEPLOY_WEBHOOK_URL }} -H "" -d ""